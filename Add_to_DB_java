import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttMessage;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

public class WeatherMonitor {

    private static final String BROKER = "tcp://test.mosquitto.org:1883";
    private static final String CLIENT_ID = MqttClient.generateClientId();
    private static final String PUB_TOPIC = "iotproject/asmweather";
    private static final String API_KEY = "a23df0e6db663530882cd6476a5dcd39";
    private static final String CITY = "Stockholm";

    public static void main(String[] args) throws MqttException, InterruptedException {
        MqttClient client = new MqttClient(BROKER, CLIENT_ID);
        MqttConnectOptions options = new MqttConnectOptions();
        options.setAutomaticReconnect(true);
        options.setCleanSession(true);
        options.setConnectionTimeout(10);
        
        client.setCallback(new MqttCallback() {
            public void connectionLost(Throwable cause) {
                System.out.println("Connection lost! " + cause.getMessage());
            }

            public void messageArrived(String topic, MqttMessage message) {
                System.out.println("Message arrived. Topic: " + topic + " Message: " + message.toString());
            }

            public void deliveryComplete(IMqttDeliveryToken token) {
                System.out.println("Delivery Complete!");
            }
        });

        client.connect(options);
        System.out.println("Connected to MQTT broker: " + BROKER);

        while (true) {
            try {
                String weatherData = getWeather();
                MqttMessage message = new MqttMessage(weatherData.getBytes());
                client.publish(PUB_TOPIC, message);
                System.out.println("Published message: " + weatherData);
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
            Thread.sleep(1800000); // 30 minutes
        }
    }

    private static String getWeather() throws IOException, InterruptedException {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://api.openweathermap.org/data/2.5/weather?q=" + 'Stockholm' + "&appid=" + "a23df0e6db663530882cd6476a5dcd39" + "&units=metric"))
                .timeout(Duration.ofMinutes(1))
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Parse the JSON response and extract required information
        // This part depends on how you choose to parse JSON in Java, could use org.json or other libraries
        String temperature = "20"; // Placeholder for actual temperature parsing
        String humidity = "50";    // Placeholder for actual humidity parsing
        String weatherDesc = "clear sky"; // Placeholder for actual weather description parsing

        return String.format("%sÂ°C, %s%%, %s", temperature, humidity, weatherDesc);
    }
}




